# Generated by Django 5.2 on 2025-04-11 19:09

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("library", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Shares",
            fields=[
                ("share_id", models.UUIDField(primary_key=True, serialize=False)),
                ("content_type", models.TextField()),
                ("content_id", models.TextField()),
                ("destination", models.TextField()),
                (
                    "platform",
                    models.TextField(
                        blank=True,
                        db_comment="Platform that initiated the share (e.g., Web, Mobile)",
                        null=True,
                    ),
                ),
                (
                    "is_reshare",
                    models.BooleanField(
                        blank=True,
                        db_comment="Marks whether a share is original or repeated",
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        db_comment="Stores additional sharing metadata in flexible structure",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "shares",
                "db_table_comment": "Tracks sharing of books, discussions, profiles, and swaps for visibility analysis",
            },
        ),
        migrations.CreateModel(
            name="Swaps",
            fields=[
                ("swap_id", models.UUIDField(primary_key=True, serialize=False)),
                ("type", models.TextField()),
                ("status", models.TextField(blank=True, null=True)),
                ("location_name", models.TextField(blank=True, null=True)),
                ("location_coords", models.JSONField(blank=True, null=True)),
                ("meetup_time", models.DateTimeField(blank=True, null=True)),
                (
                    "qr_code_id",
                    models.TextField(
                        blank=True,
                        db_comment="QR used for scanning and verifying meetup",
                        null=True,
                        unique=True,
                    ),
                ),
                ("initiator_scan_at", models.DateTimeField(blank=True, null=True)),
                ("receiver_scan_at", models.DateTimeField(blank=True, null=True)),
                (
                    "locked_until",
                    models.DateTimeField(
                        blank=True,
                        db_comment="Ensures item unavailability after exchange",
                        null=True,
                    ),
                ),
                ("dispute_reason", models.TextField(blank=True, null=True)),
                (
                    "review_status",
                    models.TextField(
                        blank=True,
                        db_comment="Tracks if feedback was left post-swap",
                        null=True,
                    ),
                ),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "swaps",
                "db_table_comment": "Tracks book exchange logic, locations, statuses, and confirmations between users",
            },
        ),
        migrations.CreateModel(
            name="Locations",
            fields=[
                ("location_id", models.UUIDField(primary_key=True, serialize=False)),
                ("name", models.TextField()),
                ("type", models.TextField()),
                (
                    "coords",
                    models.JSONField(
                        db_comment="Geo-coordinates used for midpoint calculation and scan verification"
                    ),
                ),
                ("city", models.TextField()),
                ("rating", models.FloatField(blank=True, null=True)),
                ("last_fetched", models.DateTimeField(blank=True, null=True)),
                (
                    "source",
                    models.TextField(
                        blank=True, db_comment="Data source e.g. Google, OSM", null=True
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(
                        blank=True, db_comment="True if spot is human-vetted", null=True
                    ),
                ),
                (
                    "popularity_score",
                    models.FloatField(
                        blank=True,
                        db_comment="Ranking metric based on usage and rating",
                        null=True,
                    ),
                ),
                ("is_active", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "locations",
                "db_table_comment": "Caches public exchange spots with coordinates and ratings for swap logic",
                "unique_together": {("name", "city")},
            },
        ),
        migrations.CreateModel(
            name="Notifications",
            fields=[
                (
                    "notification_id",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                (
                    "type",
                    models.TextField(
                        db_comment="Type of notification for UI segmentation and tracking"
                    ),
                ),
                ("message", models.TextField()),
                (
                    "is_read",
                    models.BooleanField(
                        blank=True,
                        db_comment="Tracks read/unread state for engagement metrics",
                        null=True,
                    ),
                ),
                ("is_archived", models.BooleanField(blank=True, null=True)),
                (
                    "delivered_at",
                    models.DateTimeField(
                        blank=True,
                        db_comment="Delivery timestamp for latency and alert system diagnostics",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="library.books",
                    ),
                ),
            ],
            options={
                "db_table": "notifications",
                "db_table_comment": "Sends alerts for swaps, bookmarks, chats, and system events",
            },
        ),
    ]
