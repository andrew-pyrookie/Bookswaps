# Generated by Django 5.2 on 2025-04-28 05:20

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("chat", "0005_alter_chats_book_alter_chats_chat_id_and_more"),
        (
            "discussions",
            "0005_discussion_book_discussion_user_note_discussion_and_more",
        ),
        (
            "library",
            "0003_book_bookmark_favorite_library_remove_bookmarks_book_and_more",
        ),
        ("swaps", "0003_exchange_location_notification_share_swap_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="bookhistory",
            name="swap",
            field=models.ForeignKey(
                blank=True,
                db_comment="Associated swap (if applicable)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="swaps.swap",
            ),
        ),
        migrations.AlterField(
            model_name="bookhistory",
            name="end_date",
            field=models.DateTimeField(
                blank=True, db_comment="End of interaction (e.g., return)", null=True
            ),
        ),
        migrations.AlterField(
            model_name="bookhistory",
            name="history_id",
            field=models.UUIDField(
                default=uuid.uuid4, editable=False, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="bookhistory",
            name="notes",
            field=models.TextField(
                blank=True,
                db_comment="Optional comments about the interaction",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="bookhistory",
            name="start_date",
            field=models.DateTimeField(
                blank=True, db_comment="Start of interaction", null=True
            ),
        ),
        migrations.AlterField(
            model_name="bookhistory",
            name="status",
            field=models.CharField(
                choices=[
                    ("swapped", "Swapped"),
                    ("borrowed", "Borrowed"),
                    ("returned", "Returned"),
                    ("added", "Added"),
                    ("removed", "Removed"),
                ],
                db_comment="Type of interaction (swapped, borrowed, returned, added, removed)",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="bookhistory",
            name="user",
            field=models.ForeignKey(
                blank=True,
                db_comment="User involved in the interaction",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="PopularBook",
            fields=[
                (
                    "book",
                    models.OneToOneField(
                        db_comment="Book with popularity metrics",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="library.book",
                    ),
                ),
                (
                    "swap_count",
                    models.PositiveIntegerField(
                        db_comment="Number of swaps for this book", default=0
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, db_comment="When popularity was last updated"
                    ),
                ),
            ],
            options={
                "db_table": "popular_books",
                "db_table_comment": "Tracks book swap popularity for recommendations",
            },
        ),
        migrations.AddField(
            model_name="book",
            name="original_owner",
            field=models.ForeignKey(
                blank=True,
                db_comment="User who first added the book",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="originally_owned_books",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="book",
            name="user",
            field=models.ForeignKey(
                blank=True,
                db_comment="Current owner of the book",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="owned_books",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="bookhistory",
            name="book",
            field=models.ForeignKey(
                db_comment="Book involved in the interaction",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="history",
                to="library.book",
            ),
        ),
        migrations.AddIndex(
            model_name="bookhistory",
            index=models.Index(fields=["book"], name="book_histor_book_id_49192f_idx"),
        ),
        migrations.AddIndex(
            model_name="bookhistory",
            index=models.Index(fields=["user"], name="book_histor_user_id_728815_idx"),
        ),
        migrations.AddIndex(
            model_name="bookhistory",
            index=models.Index(fields=["swap"], name="book_histor_swap_id_508028_idx"),
        ),
        migrations.AddIndex(
            model_name="bookhistory",
            index=models.Index(
                fields=["start_date"], name="book_histor_start_d_a21109_idx"
            ),
        ),
        migrations.AddField(
            model_name="bookmark",
            name="book",
            field=models.ForeignKey(
                db_comment="Book of interest",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bookmarked_by",
                to="library.book",
            ),
        ),
        migrations.AddField(
            model_name="bookmark",
            name="user",
            field=models.ForeignKey(
                db_comment="User who bookmarked the book",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bookmarks",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="favorite",
            name="book",
            field=models.ForeignKey(
                db_comment="Favorite book",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="favorited_by",
                to="library.book",
            ),
        ),
        migrations.AddField(
            model_name="favorite",
            name="user",
            field=models.ForeignKey(
                db_comment="User who favorited the book",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="favorites",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="library",
            name="book",
            field=models.ForeignKey(
                db_comment="Book in the userâ€™s library",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="library_entries",
                to="library.book",
            ),
        ),
        migrations.AddField(
            model_name="library",
            name="user",
            field=models.ForeignKey(
                db_comment="User who owns the library entry",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="library",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.DeleteModel(
            name="Bookmarks",
        ),
        migrations.DeleteModel(
            name="Favorites",
        ),
        migrations.DeleteModel(
            name="Libraries",
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["user"], name="books_user_id_251d40_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["isbn"], name="books_isbn_ce4a1a_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(
                fields=["available_for_exchange", "available_for_borrow"],
                name="books_availab_be2361_idx",
            ),
        ),
        migrations.DeleteModel(
            name="Books",
        ),
        migrations.AddIndex(
            model_name="bookmark",
            index=models.Index(
                fields=["user", "active"], name="bookmarks_user_id_43e79d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bookmark",
            index=models.Index(
                fields=["book", "notify_on_available"],
                name="bookmarks_book_id_8382e8_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="bookmark",
            unique_together={("user", "book")},
        ),
        migrations.AddIndex(
            model_name="favorite",
            index=models.Index(
                fields=["user", "active"], name="favorites_user_id_7df990_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="favorite",
            index=models.Index(fields=["book"], name="favorites_book_id_8ba91b_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="favorite",
            unique_together={("user", "book")},
        ),
        migrations.AddIndex(
            model_name="library",
            index=models.Index(fields=["user"], name="libraries_user_id_fb9f38_idx"),
        ),
        migrations.AddIndex(
            model_name="library",
            index=models.Index(fields=["book"], name="libraries_book_id_cc6174_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="library",
            unique_together={("user", "book")},
        ),
    ]
