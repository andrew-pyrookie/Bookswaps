# Generated by Django 5.2 on 2025-04-28 18:22

import backend.library.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('book_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(db_comment='Book title', max_length=255)),
                ('author', models.CharField(db_comment='Author(s), comma-separated or JSON', max_length=255)),
                ('year', models.IntegerField(blank=True, db_comment='Publication year', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)])),
                ('genre', models.CharField(blank=True, db_comment='Book genre', max_length=100, null=True)),
                ('isbn', models.CharField(blank=True, db_comment='ISBN-10 or ISBN-13', max_length=13, null=True, unique=True, validators=[backend.library.models.validate_isbn])),
                ('cover_image_url', models.URLField(blank=True, db_comment='Cover image URL (Open Library or S3)', max_length=500, null=True, validators=[backend.library.models.validate_cover_image_url])),
                ('qr_code_url', models.URLField(blank=True, db_comment='S3 URL for QR code used in swaps', max_length=500, null=True, unique=True)),
                ('available_for_exchange', models.BooleanField(db_comment='True if available for swapping', default=True)),
                ('available_for_borrow', models.BooleanField(db_comment='True if available for borrowing', default=True)),
                ('condition', models.CharField(blank=True, choices=[('new', 'New'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], db_comment='Physical condition of the book', max_length=50, null=True)),
                ('synopsis', models.TextField(blank=True, db_comment='Book summary', null=True)),
                ('copy_count', models.IntegerField(db_comment='Number of copies (for multiple identical books)', default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('locked_until', models.DateTimeField(blank=True, db_comment='Prevents re-swaps during cooldown', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='When book was added')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='When book was last updated')),
            ],
            options={
                'db_table': 'books',
                'db_table_comment': 'Central catalog tracking book ownership, metadata, and availability for swap/borrow',
            },
        ),
        migrations.CreateModel(
            name='BookHistory',
            fields=[
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('swapped', 'Swapped'), ('borrowed', 'Borrowed'), ('returned', 'Returned'), ('added', 'Added'), ('removed', 'Removed')], db_comment='Type of interaction (swapped, borrowed, returned, added, removed)', max_length=20)),
                ('start_date', models.DateTimeField(blank=True, db_comment='Start of interaction', null=True)),
                ('end_date', models.DateTimeField(blank=True, db_comment='End of interaction (e.g., return)', null=True)),
                ('notes', models.TextField(blank=True, db_comment='Optional comments about the interaction', null=True)),
            ],
            options={
                'db_table': 'book_history',
                'db_table_comment': 'Ledger of all user-book interactions for transparency and timeline rendering',
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('bookmark_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notify_on_available', models.BooleanField(db_comment='Notify user when book becomes available', default=False)),
                ('active', models.BooleanField(db_comment='True if bookmark is active', default=True)),
                ('notified_at', models.DateTimeField(blank=True, db_comment='When availability notification was sent', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='When bookmark was created')),
            ],
            options={
                'db_table': 'bookmarks',
                'db_table_comment': 'Tracks user interest in books and notifies when available for exchange',
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('favorite_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.TextField(blank=True, db_comment='Why the book was favorited', null=True)),
                ('active', models.BooleanField(db_comment='True if favorite is active', default=True)),
                ('notified_on_match', models.BooleanField(db_comment='Notify user on matching recommendations', default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='When favorite was created')),
            ],
            options={
                'db_table': 'favorites',
                'db_table_comment': 'Stores users’ favorite books to drive ExchangeNow and Favourites tab',
            },
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('library_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('owned', 'Owned'), ('borrowed', 'Borrowed'), ('exchanged', 'Exchanged')], db_comment='Status of the book in the user’s library', max_length=20)),
                ('added_at', models.DateTimeField(auto_now_add=True, db_comment='When book was added to library')),
                ('last_status_change_at', models.DateTimeField(auto_now=True, db_comment='When status last changed')),
            ],
            options={
                'db_table': 'libraries',
                'db_table_comment': 'Links users to their books, forming their personal library and swap trail',
            },
        ),
        migrations.CreateModel(
            name='PopularBook',
            fields=[
                ('book', models.OneToOneField(db_comment='Book with popularity metrics', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='library.book')),
                ('swap_count', models.PositiveIntegerField(db_comment='Number of swaps for this book', default=0)),
                ('last_updated', models.DateTimeField(auto_now=True, db_comment='When popularity was last updated')),
            ],
            options={
                'db_table': 'popular_books',
                'db_table_comment': 'Tracks book swap popularity for recommendations',
            },
        ),
    ]
