# Generated by Django 5.2 on 2025-04-11 19:09

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BookHistory",
            fields=[
                ("history_id", models.UUIDField(primary_key=True, serialize=False)),
                (
                    "status",
                    models.TextField(
                        db_comment="Captures type of custody: ownership, borrowing, or swapping"
                    ),
                ),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        db_comment="Optional comments about the book or transaction",
                        null=True,
                    ),
                ),
                ("source", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "book_history",
                "db_table_comment": "Ledger of all user-book interactions for transparency and timeline rendering",
            },
        ),
        migrations.CreateModel(
            name="Bookmarks",
            fields=[
                ("bookmark_id", models.UUIDField(primary_key=True, serialize=False)),
                (
                    "notify_on_available",
                    models.BooleanField(
                        blank=True,
                        db_comment="Whether user wants to be alerted on availability",
                        null=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        blank=True,
                        db_comment="Soft-deletion toggle for managing bookmarks without purging history",
                        null=True,
                    ),
                ),
                ("notified_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "bookmarks",
                "db_table_comment": "Tracks user interest in books and optionally notifies when available for exchange",
            },
        ),
        migrations.CreateModel(
            name="Books",
            fields=[
                ("book_id", models.UUIDField(primary_key=True, serialize=False)),
                ("title", models.TextField()),
                ("author", models.TextField()),
                ("year", models.IntegerField(blank=True, null=True)),
                ("genre", models.TextField(blank=True, null=True)),
                ("isbn", models.TextField(blank=True, null=True, unique=True)),
                ("cover_image_url", models.TextField(blank=True, null=True)),
                (
                    "qr_code_id",
                    models.TextField(
                        db_comment="Ties book to physical instance via QR. Used during swaps.",
                        unique=True,
                    ),
                ),
                ("available_for_exchange", models.BooleanField(blank=True, null=True)),
                ("available_for_borrow", models.BooleanField(blank=True, null=True)),
                ("condition", models.TextField(blank=True, null=True)),
                ("synopsis", models.TextField(blank=True, null=True)),
                ("copy_count", models.IntegerField(blank=True, null=True)),
                (
                    "locked_until",
                    models.DateTimeField(
                        blank=True,
                        db_comment="Prevents immediate re-swaps, enforces cooling-off post-exchange.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "books",
                "db_table_comment": "Central catalog tracking book ownership, metadata, and availability for swap/borrow.",
            },
        ),
        migrations.CreateModel(
            name="Favorites",
            fields=[
                ("favorite_id", models.UUIDField(primary_key=True, serialize=False)),
                (
                    "reason",
                    models.TextField(
                        blank=True,
                        db_comment="Captures why the book was favorited for future personalization",
                        null=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        blank=True,
                        db_comment="Soft deletion to track un-favorited books without losing data",
                        null=True,
                    ),
                ),
                ("notified_on_match", models.BooleanField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "favorites",
                "db_table_comment": "Stores usersâ€™ favorite books to drive ExchangeNow and Favourites tab",
            },
        ),
        migrations.CreateModel(
            name="Libraries",
            fields=[
                ("library_id", models.UUIDField(primary_key=True, serialize=False)),
                (
                    "status",
                    models.TextField(
                        blank=True,
                        db_comment="Tracks whether book is owned, exchanged, or borrowed by the user",
                        null=True,
                    ),
                ),
                ("added_at", models.DateTimeField(blank=True, null=True)),
                (
                    "last_status_change_at",
                    models.DateTimeField(
                        blank=True,
                        db_comment="Tracks last transition for audit or analytics",
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "libraries",
                "db_table_comment": "Links users to their books, forming their personal library and swap trail",
            },
        ),
    ]
